# -*- coding: utf-8 -*-
"""Codemon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGr-6ZmEYNmOV_sUz4-1mucd3TFQ2hw8
"""

import requests
import random
#Questions
preguntes_python = [
    {"pregunta": "Quin tipus retorna la funci√≥ len() en Python?",
     "opcions": ["float", "str", "int"],
     "resposta": "int"},

    {"pregunta": "Quina √©s la sortida de print('Hola'[1])?",
     "opcions": ["H", "o", "a"],
     "resposta": "o"},

    {"pregunta": "Quin operador s‚Äôutilitza per fer divisi√≥ entera en Python?",
     "opcions": ["/", "%", "//"],
     "resposta": "//"},

    {"pregunta": "Quin √©s el resultat de 2 ** 3 en Python?",
     "opcions": ["6", "5", "8"],
     "resposta": "8"},

    {"pregunta": "Com s‚Äôinicialitza una llista buida?",
     "opcions": ["{}", "()", "[]"],
     "resposta": "[]"},

    {"pregunta": "Quin √©s el resultat de bool([])?",
     "opcions": ["False", "True", "Error"],
     "resposta": "False"},

    {"pregunta": "Quina paraula clau s'utilitza per definir una funci√≥?",
     "opcions": ["defunc", "function", "def"],
     "resposta": "def"},

    {"pregunta": "Com es representa un diccionari buit?",
     "opcions": ["[]", "()", "{}"],
     "resposta": "{}"},

    {"pregunta": "Quin m√®tode s‚Äôutilitza per afegir un element a una llista?",
     "opcions": ["insert()", "extend()", "append()"],
     "resposta": "append()"},

    {"pregunta": "Qu√® fa el m√®tode .pop() d‚Äôuna llista?",
     "opcions": ["Afegeix un element", "Elimina i retorna l‚Äô√∫ltim element", "Ordena la llista"],
     "resposta": "Elimina i retorna l‚Äô√∫ltim element"},

    {"pregunta": "Quina paraula clau s‚Äôutilitza per sortir d‚Äôun bucle?",
     "opcions": ["skip", "break", "stop"],
     "resposta": "break"},

    {"pregunta": "Quin tipus de dada √©s {'a': 1, 'b': 2}?",
     "opcions": ["set", "list", "dict"],
     "resposta": "dict"},

    {"pregunta": "Com podem convertir una cadena '123' a un enter?",
     "opcions": ["str('123')", "float('123')", "int('123')"],
     "resposta": "int('123')"},

    {"pregunta": "Quin √©s el resultat de 3 > 2 and 2 > 1?",
     "opcions": ["False", "True", "None"],
     "resposta": "True"},

    {"pregunta": "Com es comenta una l√≠nia en Python?",
     "opcions": ["//", "<!-- -->", "#"],
     "resposta": "#"},

    {"pregunta": "Quin tipus retorna type(3.14)?",
     "opcions": ["int", "float", "str"],
     "resposta": "float"},

    {"pregunta": "Quin m√®tode s‚Äôutilitza per eliminar un element concret d‚Äôuna llista?",
     "opcions": ["remove()", "delete()", "pop(index)"],
     "resposta": "remove()"},

    {"pregunta": "Com es diu que un par√†metre de funci√≥ t√© un valor per defecte?",
     "opcions": ["Optatiu", "Inicialitzat", "Valor per defecte"],
     "resposta": "Valor per defecte"},

    {"pregunta": "Quin ser√† el resultat de 5 % 2?",
     "opcions": ["1", "2", "0"],
     "resposta": "1"},

    {"pregunta": "Quin √©s el tipus de range(5)?",
     "opcions": ["list", "range", "tuple"],
     "resposta": "range"},

    {"pregunta": "Quina estructura s‚Äôutilitza per repetir instruccions mentre una condici√≥ √©s certa?",
     "opcions": ["for", "while", "repeat"],
     "resposta": "while"},

    {"pregunta": "Quin ser√† el resultat de list('abc')?",
     "opcions": ["['abc']", "['a', 'b', 'c']", "['a b c']"],
     "resposta": "['a', 'b', 'c']"},

    {"pregunta": "Quin m√®tode de cadena converteix tot el text a maj√∫scules?",
     "opcions": ["capitalize()", "upper()", "majuscules()"],
     "resposta": "upper()"},

    {"pregunta": "Com es diu un valor que no √©s ni True ni False per√≤ representa 'res'?",
     "opcions": ["False", "None", "Empty"],
     "resposta": "None"},

    {"pregunta": "Quin operador s‚Äôutilitza per comparar igualtat?",
     "opcions": ["=", "=>", "=="],
     "resposta": "=="},

    {"pregunta": "Com podem obtenir la longitud d‚Äôuna cadena?",
     "opcions": ["size('text')", "count('text')", "len('text')"],
     "resposta": "len('text')"},

    {"pregunta": "Quina √©s la sortida de print(type(True))?",
     "opcions": ["str", "bool", "int"],
     "resposta": "bool"},

    {"pregunta": "Quina √©s la sortida de print(9 // 2)?",
     "opcions": ["4", "4.5", "5"],
     "resposta": "4"},

    {"pregunta": "Quin operador representa la negaci√≥ l√≤gica?",
     "opcions": ["not equal", "!", "not"],
     "resposta": "not"},

    {"pregunta": "Com es defineix una tupla?",
     "opcions": ["[1, 2]", "(1, 2)", "{1, 2}"],
     "resposta": "(1, 2)"},

    {"pregunta": "Quin d‚Äôaquests √©s un tipus immutable?",
     "opcions": ["list", "tuple", "dict"],
     "resposta": "tuple"},

    {"pregunta": "Quin √©s el m√®tode correcte per afegir m√∫ltiples valors a una llista?",
     "opcions": ["add()", "extend()", "push()"],
     "resposta": "extend()"},

    {"pregunta": "Quina estructura serveix per capturar errors en Python?",
     "opcions": ["try-catch", "try-except", "error-check"],
     "resposta": "try-except"},

    {"pregunta": "Quin ser√† el resultat de set([1,2,2,3])?",
     "opcions": ["[1,2,2,3]", "{1,2,3}", "(1,2,2,3)"],
     "resposta": "{1,2,3}"},

    {"pregunta": "Com pots saber si una clau existeix dins un diccionari?",
     "opcions": ["key in dict", "key == dict", "'key' in dict"],
     "resposta": "'key' in dict"},

    {"pregunta": "Quin m√®tode s‚Äôutilitza per ordenar una llista?",
     "opcions": ["sort()", "organize()", "order()"],
     "resposta": "sort()"},

    {"pregunta": "Quin √©s el m√®tode per obtenir el valor d‚Äôuna clau d‚Äôun diccionari?",
     "opcions": ["value()", "get()", "access()"],
     "resposta": "get()"},

    {"pregunta": "Quin valor retorna una funci√≥ si no t√© return expl√≠cit?",
     "opcions": ["False", "None", "0"],
     "resposta": "None"},

    {"pregunta": "Com pots fer una funci√≥ an√≤nima?",
     "opcions": ["def =", "lambda", "static"],
     "resposta": "lambda"},

    {"pregunta": "Com pots saber els elements √∫nics d‚Äôuna llista?",
     "opcions": ["list()", "dict()", "set()"],
     "resposta": "set()"},

    {"pregunta": "Quin m√®tode retorna el n√∫mero d‚Äôaparicions d‚Äôun element a una llista?",
     "opcions": ["count()", "times()", "amount()"],
     "resposta": "count()"},

    {"pregunta": "Quin m√®tode de cadena elimina espais al principi i final?",
     "opcions": ["clean()", "strip()", "cut()"],
     "resposta": "strip()"},

    {"pregunta": "Qu√® retorna range(3)?",
     "opcions": ["[0,1,2,3]", "[0,1,2]", "[1,2,3]"],
     "resposta": "[0,1,2]"},

    {"pregunta": "Quin √©s el valor de not False?",
     "opcions": ["True", "False", "None"],
     "resposta": "True"},

    {"pregunta": "Quin √©s el m√®tode per inserir en una posici√≥ concreta d‚Äôuna llista?",
     "opcions": ["insert()", "place()", "put()"],
     "resposta": "insert()"},

    {"pregunta": "Quin tipus de dada √©s [x for x in range(3)]?",
     "opcions": ["dict", "list", "tuple"],
     "resposta": "list"},

    {"pregunta": "Quin s√≠mbol s‚Äôutilitza per concatenar cadenes?",
     "opcions": ["-", ",", "+"],
     "resposta": "+"},

    {"pregunta": "Com pots executar un codi nom√©s si √©s el fitxer principal?",
     "opcions": ["if __main__ == '__name__'", "if __name__ == '__main__'", "main(__name__)"],
     "resposta": "if __name__ == '__main__'"},

    {"pregunta": "Com es diu una funci√≥ dins una classe?",
     "opcions": ["m√®tode", "atribut", "inst√†ncia"],
     "resposta": "m√®tode"},

    {"pregunta": "Quin ser√† el resultat de bool('False')?",
     "opcions": ["True", "False", "Error"],
     "resposta": "True"},
]

# Define Monster class
class Monster:
    def __init__(self, name, HP, LVL, ATTACK):
        self.name = name
        self.HP = HP
        self.LVL = LVL
        self.ATTACK = ATTACK



#Player Intialize
class Player:
    def __init__(self, name, HP, LVL, ATTACK):
        self.name = name
        self.HP = HP
        self.LVL = LVL
        self.ATTACK = ATTACK



#Attack
def Attack():
    # Generate a random index
    random_question_index = random.randint(0, len(preguntes_python) - 1)

    # Select the random question
    random_question = preguntes_python[random_question_index]

    # Display the question and options
    print(f"\nüî• {random_question['pregunta']}")
    for idx, option in enumerate(random_question["opcions"], 1):
        print(f"{idx}. {option}")
    answer_p = input("Escriu la resposta correcte: ")
    if answer_p == random_question["resposta"]:
      print("Players Attack")
      monster1.HP -= player.ATTACK
      print("Monster's HP " + str(monster1.HP))
    else:
      print("Monster's Attack")
      player.HP -= monster1.ATTACK
      print("Players's HP " + str(player.HP))

#Monster Die
score = 0
def M_die():
  print("Monster " + monster1.name + " has died!!")
  score =+ 25
  print("Your actual score is: "+ str(score))

#Player Die
highscore = score
def P_Die():
  print("You Die")
  print("You're highscore was: "+ str(highscore))


#Battle
def Battle():
  print("Batalla")
  print(player.name + " VS " + monster1.name)
  print("\n")
  #Player's turn
  while player.HP > 0 and monster1.HP > 0:
    print("Player stats")
    print("Health: " + str(player.HP) +"\n"
          "LVL: " + str(player.LVL) +"\n"
          "Attack: " + str(player.ATTACK) +"\n")

    print("Your Turn")
    Attack()
    print("Attack ended")
    print("\n")




# Initialize Player
player = Player("You", 100, 1, 100)

# Initialize Monster
monster1 = Monster("Marrameu", 100, 1, 10)

def main():
    global monster1
    while player.HP > 0:
        Battle()

        if player.HP <= 0:
            P_Die()
            break

        if monster1.HP <= 0:
            M_die()

            #  Update player stats before printing
            player.LVL += 1
            player.HP += 20 * player.LVL
            player.ATTACK += random.randint(0, 10) * player.LVL

            # Create a stronger new monster
            monster1 = Monster("Marrameu", 100 + (player.LVL * 10), player.LVL, 5 + (player.LVL * 2))

        print("Player has won!!\n",
             "You leveled up!!! " + str(player.LVL - 1) + " ---> " + str(player.LVL) + "\n",
              "HP: " + str(player.HP - (20 * player.LVL)) + " ---> " + str(player.HP) + "\n",
              "Attack: " + str(player.ATTACK - (random.randint(0, 10) * player.LVL)) + " ---> " + str(player.ATTACK))


main()