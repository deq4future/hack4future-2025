# -*- coding: utf-8 -*-
"""Codemon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGr-6ZmEYNmOV_sUz4-1mucd3TFQ2hw8
"""

import os
import random
import requests
import time

respuesta = requests.get("https://fun.codelearn.cat/hackathon/game/new")
print(respuesta.status_code)
dades = respuesta.json()

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

player_art = r"""
   \O/
    |
   / \
 You (Hero)
"""

monster_ascii = {
    "Marrameu": r"""
    |\___/|
   (= o_o =)
   (")___(")
 Marrameu
""",
    "Pyrosaur": r"""
    /^ ^\
   / 0 0 \
   V\ Y /V
    / - \
   |    \
   || (__)
 Pyrosaur
""",
    "Bugzilla": r"""
    .-'      '-.
   /            \
  |              |
   \.--. .--./
   (    Y    )
    \__^__/
  Bugzilla
""",
    "Stacktoise": r"""
   _____     ____
  /     \~~~/    \\
 (  o  o ) ( o o  )
  \__^__/   \_^__/
  /     \___/     \\
 |               |
 |__|_|_|___|_|__|
Stacktoise
""",
    "Nullphant": r"""
     _.-- ,.--.
   .'   .'     /
   | @       |'..--------._
  /      \._/              '.
 /  .-.-                     \
(  /    \                     \
 \\      '.                  | #
  \\       \   -.           /
   :\       |    )._____.'   \
    "       |   /  \  |  \    )
            |   |./'  :__ \.-'
            '--'
Nullphant
""",
    "Indentarion": r"""
     ,     ,
    (\____/)
     (_oo_)
     (O  O)
    /   \/\
   (__/\__)
   | |  | |
  /_/|__|_\
 Indentarion
""",
    "Dracorix": r"""
      /^\/^\
    _|__|  O|
\/     /~  \
 \____|__________/  \
        \_______      \
                `\     \                 \
                  |     |                  \
                 /      /                    \
                /     /                       \
              /      /                         \ \
             /     /                            \  \
           /     /             _----_            \   \
          /     /           _-~      ~-_         |   |
         (      (        _-~    _--_    ~-_     _/   |
          \      ~-____-~    _-~    ~-_    ~-_-~    /
            ~-_           _-~          ~-_       _-~
               ~--______-~                ~-___-~
Dracorix
""",
    "Toxicorn": r"""
      .     .
       \___/
      (o o)
      / V \
     /(   )\
     ^^   ^^
  Toxicorn
""",
    "Cryptodon": r"""
     .-=-.
    /  !  \
   |      |
   |  .-. |
   |  | | |
   |  '-' |
    \     /
     `---`
 Cryptodon
""",
    "Voltigon": r"""
     \     /
      \   /
       \_/
       |=|
      __|__
     /     \
    |  ‚ö°  |
     \___/
 Voltigon
""",
    "Octopulse": r"""
   _____
  /     \
 | () () |
  \  ^  /
   |||||
   |||||
""",
    "JavaDog": r"""
    |\_/|
  | @ @   Woof!
  |   <>
  |  _/\
  | |  |
""",
    "CookieHamster": r"""
      (\_/)
    ( ‚Ä¢_‚Ä¢)
   / >üç™
""",
    "HDCat": r"""
        ,_     _
    |\\_,-~/
    / _  _ |    ,--.
   (  @  @ )   / ,-'
    \  _T_/-._( (
    /         `. \
   |         _  \ |
    \ \ ,  /      |
     || |-_\__   /
    ((_/`(____,-'
""",
    "CCSD": r"""
       .-----.
  / .===. \
  \/ 6 6 \/
  ( \_=_/ )
   ^^---^^
"""
}

preguntes_python = [
    {"pregunta": "Quin tipus retorna la funci√≥ len() en Python?", "opcions": ["float", "str", "int"], "resposta": "int"},
    {"pregunta": "Quina √©s la sortida de print('Hola'[1])?", "opcions": ["H", "o", "a"], "resposta": "o"},
    {"pregunta": "Quin operador s‚Äôutilitza per fer divisi√≥ entera en Python?", "opcions": ["/", "%", "//"], "resposta": "//"},
    {"pregunta": "Quin √©s el resultat de 2 ** 3 en Python?", "opcions": ["6", "5", "8"], "resposta": "8"},
    {"pregunta": "Com s‚Äôinicialitza una llista buida?", "opcions": ["{}", "()", "[]"], "resposta": "[]"},
    {"pregunta": "Quin √©s el resultat de bool([])?", "opcions": ["False", "True", "Error"], "resposta": "False"},
    {"pregunta": "Quina paraula clau s'utilitza per definir una funci√≥?", "opcions": ["defunc", "function", "def"], "resposta": "def"},
    {"pregunta": "Com es representa un diccionari buit?", "opcions": ["[]", "()", "{}"], "resposta": "{}"},
    {"pregunta": "Quin m√®tode s‚Äôutilitza per afegir un element a una llista?", "opcions": ["insert()", "extend()", "append()"], "resposta": "append()"},
    {"pregunta": "Qu√® fa el m√®tode .pop() d‚Äôuna llista?", "opcions": ["Afegeix un element", "Elimina i retorna l‚Äô√∫ltim element", "Ordena la llista"], "resposta": "Elimina i retorna l‚Äô√∫ltim element"},
    {"pregunta": "Quina paraula clau s‚Äôutilitza per sortir d‚Äôun bucle?", "opcions": ["skip", "break", "stop"], "resposta": "break"},
    {"pregunta": "Quin tipus de dada √©s {'a': 1, 'b': 2}?", "opcions": ["set", "list", "dict"], "resposta": "dict"},
    {"pregunta": "Com podem convertir una cadena '123' a un enter?", "opcions": ["str('123')", "float('123')", "int('123')"], "resposta": "int('123')"},
    {"pregunta": "Quin √©s el resultat de 3 > 2 and 2 > 1?", "opcions": ["False", "True", "None"], "resposta": "True"},
    {"pregunta": "Com es comenta una l√≠nia en Python?", "opcions": ["//", "<!-- -->", "#"], "resposta": "#"},
    {"pregunta": "Quin tipus retorna type(3.14)?", "opcions": ["int", "float", "str"], "resposta": "float"},
    {"pregunta": "Quin m√®tode s‚Äôutilitza per eliminar un element concret d‚Äôuna llista?", "opcions": ["remove()", "delete()", "pop(index)"], "resposta": "remove()"},
    {"pregunta": "Com es diu que un par√†metre de funci√≥ t√© un valor per defecte?", "opcions": ["Optatiu", "Inicialitzat", "Valor per defecte"], "resposta": "Valor per defecte"},
    {"pregunta": "Quin ser√† el resultat de 5 % 2?", "opcions": ["1", "2", "0"], "resposta": "1"},
    {"pregunta": "Quin √©s el tipus de range(5)?", "opcions": ["list", "range", "tuple"], "resposta": "range"},
    {"pregunta": "Quina estructura s‚Äôutilitza per repetir instruccions mentre una condici√≥ √©s certa?", "opcions": ["for", "while", "repeat"], "resposta": "while"},
    {"pregunta": "Quin ser√† el resultat de list('abc')?", "opcions": ["['abc']", "['a', 'b', 'c']", "['a b c']"], "resposta": "['a', 'b', 'c']"},
    {"pregunta": "Quin m√®tode de cadena converteix tot el text a maj√∫scules?", "opcions": ["upper()", "lower()", "capitalize()"], "resposta": "upper()"},
]

class Player:
    def __init__(self, name, HP, LVL, ATTACK):
        self.name = name
        self.HP = HP
        self.LVL = LVL
        self.ATTACK = ATTACK

class Monster:
    def __init__(self, name, HP, LVL, ATTACK, art):
        self.name = name
        self.HP = HP
        self.LVL = LVL
        self.ATTACK = ATTACK
        self.art = art

score = 0
highscore = 0
difficulty_multiplier = 1  # Puedes cambiar la dificultad (1, 1.5, 2...)

TIME_LIMIT = 30  # segundos para responder cada pregunta

def status_bar():
    print("\nüßë‚Äçüíª Estat del jugador:")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print(f"‚ïë ‚ù§Ô∏è Vida: {player.HP:<16}‚ïë")
    print(f"‚ïë ‚öîÔ∏è  Atac: {player.ATTACK:<15}‚ïë")
    print(f"‚ïë üìà Nivell: {player.LVL:<14}‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

def print_title():
    print(r"""
 _________            .___
 \_   ___ \  ____   __| _/____   _____   ____   ____
 /    \  \/ /  _ \ / __ |/ __ \ /     \ /  _ \ /    \
 \     \___(  <_> ) /_/ \  ___/|  Y Y  (  <_> )   |  \
  \______  /\____/\____ |\___  >__|_|  /\____/|___|  /
         \/            \/    \/      \/            \/
 ________          _____              __      __  .__                            .__  .__ ._._.
 \______ \   _____/ ____\____ _____ _/  |_  _/  |_|  |__   ____   _____   _____  |  | |  || | |
  |    |  \_/ __ \   __\/ __ \\__  \\   __\ \   __\  |  \_/ __ \ /     \  \__  \ |  | |  || | |
  |    `   \  ___/|  | \  ___/ / __ \|  |    |  | |   Y  \  ___/|  Y Y  \  / __ \|  |_|  |_\|\|
 /_______  /\___  >__|  \___  >____  /__|    |__| |___|  /\___  >__|_|  / (____  /____/____/___
         \/     \/          \/     \/                  \/     \/      \/       \/          \/\/
               ‚öîÔ∏è  BENVINGUT A CODEMON ‚öîÔ∏è
""")
items = {
    "1": {"nom": "Poci√≥ de vida (+30 HP)", "cost": 50, "efecte": lambda player: setattr(player, 'HP', player.HP + 30)},
    "2": {"nom": "Espasa afilada (+5 ATK)", "cost": 75, "efecte": lambda player: setattr(player, 'ATTACK', player.ATTACK + 5)},
    "3": {"nom": "Armadura resistent (*1.25 HP)", "cost": 100, "efecte": lambda player: setattr(player, 'HP', player.HP * 1.25)},
}

def tienda():
    global score
    clear_screen()
    print("üè™ Botiga del Her√≥i")
    print(f"Tens {score} punts per gastar\n")
    for key, item in items.items():
        print(f"{key}. {item['nom']} - {item['cost']} punts")

    print("0. Tornar al joc")

    while True:
        choice = input("Escull un objecte per comprar o 0 per sortir: ")
        if choice == "0":
            break
        if choice in items:
            item = items[choice]
            if score >= item["cost"]:
                score -= item["cost"]
                item["efecte"](player)
                print(f"Has comprat {item['nom']}!")
            else:
                print("No tens punts suficients!")
        else:
            print("Opci√≥ no v√†lida!")

        input("Prem ENTER per continuar a la botiga...")
        clear_screen()
        print("üè™ Botiga del Her√≥i")
        print(f"Tens {score} punts per gastar\n")
        for key, item in items.items():
            print(f"{key}. {item['nom']} - {item['cost']} punts")
        print("0. Tornar al joc")

def generate_monster(level):
    # Si el nivell √©s m√∫ltiple de 5, surt un boss
    if level % 5 == 0 and level >= 10:
        boss_name = random.choice(list(bosses.keys()))
        boss = bosses[boss_name]
        return Monster(boss_name, boss["HP"], boss["LVL"], boss["ATTACK"], boss["art"])

    # Monstre normal
    name = random.choice(list(monster_ascii.keys()))
    base_HP = random.randint(20, 30) + level * 5
    base_ATK = random.randint(5, 10) + level * 2
    base_LVL = level
    art = monster_ascii[name]
    HP = int(base_HP * difficulty_multiplier)
    ATTACK = int(base_ATK * difficulty_multiplier)
    return Monster(name, HP, base_LVL, ATTACK, art)


def attack():
    global player, monster1
    question = random.choice(preguntes_python)

    clear_screen()
    print(f"{player_art}      {monster1.art}")
    status_bar()
    print(f"\nüî• {question['pregunta']}")
    for idx, option in enumerate(question["opcions"], 1):
        print(f"{idx}. {option}")

    print("\nAccions de combat:")
    print("1. Atac b√†sic (100% encert, fa dany normal)")
    print("2. Atac fort (75% d'encert, fa 1.5x dany)")
    print("3. Defensa (redueix dany al proper atac del monstre)")

    accion = None
    while True:
        try:
            accion = int(input("\nEscull acci√≥ (1-3): "))
            if accion not in [1, 2, 3]:
                raise ValueError
            break
        except ValueError:
            print("Opci√≥ no v√†lida, torna a intentar.")

    defensa_activa = False
    start_time = time.time()
    try:
        user_input = input(f"\nRespon la pregunta (temps l√≠mit {TIME_LIMIT} seg): ")
        elapsed = time.time() - start_time
        if elapsed > TIME_LIMIT:
            raise TimeoutError
        user_input = int(user_input)
    except (ValueError, TimeoutError):
        print("\n‚ùå Temps exhaurit o resposta incorrecta! Monster ataca!")
        damage = monster_attack_damage(monster1)
        player.HP -= damage
        if player.HP < 0:
            player.HP = 0
        print(f"HP restant del jugador: {player.HP}")
        input("\nPrem ENTER per continuar...")
        return

    correcte = (1 <= user_input <= len(question["opcions"]) and
                question["opcions"][user_input - 1] == question["resposta"])

    if accion == 3:
        defensa_activa = True
        print("\nüõ°Ô∏è Defensa activada! El proper atac del monstre far√† menys dany.")
        damage = monster_attack_damage(monster1) // 2
        player.HP -= damage
        if player.HP < 0:
            player.HP = 0
        print(f"\nMonster ataca amb dany redu√Øt! HP restant del jugador: {player.HP}")
        input("\nPrem ENTER per continuar...")
        return

    if not correcte:
        print("\n‚ùå Incorrecte! Monster ataca!")
        damage = monster_attack_damage(monster1)
        player.HP -= damage
        if player.HP < 0:
            player.HP = 0
        print(f"HP restant del jugador: {player.HP}")
    else:
        if accion == 1:
            print("\n‚úîÔ∏è Correcte! Player ataca amb atac b√†sic!")
            damage = player_attack_damage(player)
            monster1.HP -= damage
            print(f"Has fet {damage} de dany!")
        elif accion == 2:
            if random.random() <= 0.75:
                damage = int(player_attack_damage(player) * 1.5)
                monster1.HP -= damage
                print(f"\n‚úîÔ∏è Atac fort encertat! Fas {damage} de dany!")
            else:
                print("\n‚ùå Atac fort fallat! Monster ataca!")
                damage = monster_attack_damage(monster1)
                player.HP -= damage
                if player.HP < 0:
                    player.HP = 0
                print(f"HP restant del jugador: {player.HP}")

    if monster1.HP < 0:
        monster1.HP = 0
    print(f"{monster1.name} HP restant: {monster1.HP}")

    input("\nPrem ENTER per continuar...")

def monster_attack_damage(monster):
    # Da√±o del monstruo con peque√±o rango aleatorio y 10% de que jugador esquive (0 da√±o)
    if random.random() < 0.10:
        print("üéØ Has esquivat l'atac del monstre!")
        return 0
    return random.randint(monster.ATTACK - 2, monster.ATTACK + 2)

def player_attack_damage(player):
    # Da√±o del jugador con peque√±o rango aleatorio
    return random.randint(player.ATTACK - 2, player.ATTACK + 2)

def m_die():
    global score
    clear_screen()
    print(f"\nüíÄ El monstre {monster1.name} ha mort!")
    score += 25
    print(f"Puntuaci√≥ actual: {score}")
    input("\nPrem ENTER per continuar...")
    tienda()

def p_die():
    global highscore, score
    clear_screen()
    print("\n‚ò†Ô∏è Has mort!")
    dades2 = {"game_id": dades["game_id"], "data": dades, "score": score}
    requests.post("https://fun.codelearn.cat/hackathon/game/finalize", json=dades2)

    if score > highscore:
        highscore = score
        print("üéâ Nou r√®cord!")
    print(f"üèÜ La teva millor puntuaci√≥: {highscore}")
    score = 0
    input("\nPrem ENTER per continuar...")

def battle():
    global monster1
    while player.HP > 0 and monster1.HP > 0:
        clear_screen()
        print(f"{player_art}      {monster1.art}")
        status_bar()
        print(f"\nüí• {player.name} vs {monster1.name} - Nivell {monster1.LVL}")
        attack()

    if monster1.HP <= 0:
        m_die()
        # Incrementa nivell jugador, recupera vida y genera nuevo monstre
        player.LVL += 1
        player.HP = 50 + player.LVL * 10
        player.ATTACK = 10 + player.LVL * 2
        monster1 = generate_monster(player.LVL)
        battle()

    if player.HP <= 0:
        p_die()
        # Reinicia jugador
        init_game()

def init_game():
    global player, monster1, score
    score = 0
    player_name = input("Introdueix el teu nom, heroi: ")
    player = Player(player_name, 50, 1, 10)
    monster1 = generate_monster(player.LVL)
    clear_screen()
    print_title()
    input("Prem ENTER per comen√ßar la batalla!")
    battle()

if __name__ == "__main__":
    init_game()

