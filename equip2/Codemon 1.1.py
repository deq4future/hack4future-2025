# -*- coding: utf-8 -*-
"""Codemon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGr-6ZmEYNmOV_sUz4-1mucd3TFQ2hw8
"""

import os
import random
import requests

respuesta = requests.get("https://fun.codelearn.cat/hackathon/game/new")
print(respuesta.status_code)
dades = respuesta.json()

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# ASCII Art del jugador i monstruos (igual que abans)
player_art = r"""
   \O/
    |
   / \
 You (Hero)
"""

monster_ascii = {
    "Marrameu": r"""
    |\___/|
   (= o_o =)
   (")___(")
 Marrameu
""",
    "Pyrosaur": r"""
    /^ ^\
   / 0 0 \
   V\ Y /V
    / - \
   |    \
   || (__)
 Pyrosaur
""",
    "Bugzilla": r"""
    .-'      '-.
   /            \
  |              |
   \.--. .--./
   (    Y    )
    \__^__/
  Bugzilla
""",
    "Stacktoise": r"""
   _____     ____
  /     \~~~/    \\
 (  o  o ) ( o o  )
  \__^__/   \_^__/
  /     \___/     \\
 |               |
 |__|_|_|___|_|__|
Stacktoise
""",
    "Nullphant": r"""
     _.-- ,.--.
   .'   .'     /
   | @       |'..--------._
  /      \._/              '.
 /  .-.-                     \
(  /    \                     \
 \\      '.                  | #
  \\       \   -.           /
   :\       |    )._____.'   \
    "       |   /  \  |  \    )
            |   |./'  :__ \.-'
            '--'
Nullphant
""",
    "Indentarion": r"""
     ,     ,
    (\____/)
     (_oo_)
     (O  O)
    /   \/\
   (__/\__)
   | |  | |
  /_/|__|_\
 Indentarion
""",
    "Dracorix": r"""
      /^\/^\
    _|__|  O|
\/     /~  \
 \____|__________/  \
        \_______      \
                `\     \                 \
                  |     |                  \
                 /      /                    \
                /     /                       \
              /      /                         \ \
             /     /                            \  \
           /     /             _----_            \   \
          /     /           _-~      ~-_         |   |
         (      (        _-~    _--_    ~-_     _/   |
          \      ~-____-~    _-~    ~-_    ~-_-~    /
            ~-_           _-~          ~-_       _-~
               ~--______-~                ~-___-~
Dracorix
""",
    "Toxicorn": r"""
      .     .
       \___/
      (o o)
      / V \
     /(   )\
     ^^   ^^
  Toxicorn
""",
    "Cryptodon": r"""
     .-=-.
    /  !  \
   |      |
   |  .-. |
   |  | | |
   |  '-' |
    \     /
     `---`
 Cryptodon
""",
    "Voltigon": r"""
     \     /
      \   /
       \_/
       |=|
      __|__
     /     \
    |  ‚ö°  |
     \___/
 Voltigon
""",
"Octopulse": r"""
   _____
  /     \
 | () () |
  \  ^  /
   |||||
   |||||
""",
  "JavaDog": r"""
    |\_/|
  | @ @   Woof!
  |   <>
  |  _/\
  | |  |
""",
  "CookieHamster": r"""
      (\_/)
    ( ‚Ä¢_‚Ä¢)
   / >üç™
""",
    "HDCat": r"""
        ,_     _
    |\\_,-~/
    / _  _ |    ,--.
   (  @  @ )   / ,-'
    \  _T_/-._( (
    /         `. \
   |         _  \ |
    \ \ ,  /      |
     || |-_\__   /
    ((_/`(____,-'
""",
    "CCSD": r"""
       .-----.
  / .===. \
  \/ 6 6 \/
  ( \_=_/ )
   ^^---^^
"""
}
# Preguntes Python
preguntes_python = [
    {"pregunta": "Quin tipus retorna la funci√≥ len() en Python?", "opcions": ["float", "str", "int"], "resposta": "int"},
    {"pregunta": "Quina √©s la sortida de print('Hola'[1])?", "opcions": ["H", "o", "a"], "resposta": "o"},
    {"pregunta": "Quin operador s‚Äôutilitza per fer divisi√≥ entera en Python?", "opcions": ["/", "%", "//"], "resposta": "//"},
    {"pregunta": "Quin √©s el resultat de 2 ** 3 en Python?", "opcions": ["6", "5", "8"], "resposta": "8"},
    {"pregunta": "Com s‚Äôinicialitza una llista buida?", "opcions": ["{}", "()", "[]"], "resposta": "[]"},
    {"pregunta": "Quin √©s el resultat de bool([])?", "opcions": ["False", "True", "Error"], "resposta": "False"},
    {"pregunta": "Quina paraula clau s'utilitza per definir una funci√≥?", "opcions": ["defunc", "function", "def"], "resposta": "def"},
    {"pregunta": "Com es representa un diccionari buit?", "opcions": ["[]", "()", "{}"], "resposta": "{}"},
    {"pregunta": "Quin m√®tode s‚Äôutilitza per afegir un element a una llista?", "opcions": ["insert()", "extend()", "append()"], "resposta": "append()"},
    {"pregunta": "Qu√® fa el m√®tode .pop() d‚Äôuna llista?", "opcions": ["Afegeix un element", "Elimina i retorna l‚Äô√∫ltim element", "Ordena la llista"], "resposta": "Elimina i retorna l‚Äô√∫ltim element"},
    {"pregunta": "Quina paraula clau s‚Äôutilitza per sortir d‚Äôun bucle?", "opcions": ["skip", "break", "stop"], "resposta": "break"},
    {"pregunta": "Quin tipus de dada √©s {'a': 1, 'b': 2}?", "opcions": ["set", "list", "dict"], "resposta": "dict"},
    {"pregunta": "Com podem convertir una cadena '123' a un enter?", "opcions": ["str('123')", "float('123')", "int('123')"], "resposta": "int('123')"},
    {"pregunta": "Quin √©s el resultat de 3 > 2 and 2 > 1?", "opcions": ["False", "True", "None"], "resposta": "True"},
    {"pregunta": "Com es comenta una l√≠nia en Python?", "opcions": ["//", "<!-- -->", "#"], "resposta": "#"},
    {"pregunta": "Quin tipus retorna type(3.14)?", "opcions": ["int", "float", "str"], "resposta": "float"},
    {"pregunta": "Quin m√®tode s‚Äôutilitza per eliminar un element concret d‚Äôuna llista?", "opcions": ["remove()", "delete()", "pop(index)"], "resposta": "remove()"},
    {"pregunta": "Com es diu que un par√†metre de funci√≥ t√© un valor per defecte?", "opcions": ["Optatiu", "Inicialitzat", "Valor per defecte"], "resposta": "Valor per defecte"},
    {"pregunta": "Quin ser√† el resultat de 5 % 2?", "opcions": ["1", "2", "0"], "resposta": "1"},
    {"pregunta": "Quin √©s el tipus de range(5)?", "opcions": ["list", "range", "tuple"], "resposta": "range"},
    {"pregunta": "Quina estructura s‚Äôutilitza per repetir instruccions mentre una condici√≥ √©s certa?", "opcions": ["for", "while", "repeat"], "resposta": "while"},
    {"pregunta": "Quin ser√† el resultat de list('abc')?", "opcions": ["['abc']", "['a', 'b', 'c']", "['a b c']"], "resposta": "['a', 'b', 'c']"},
    {"pregunta": "Quin m√®tode de cadena converteix tot el text a maj√∫scules?", "opcions": ["capitalize()", "upper()", "majuscules()"], "resposta": "upper()"},
    {"pregunta": "Com es diu un valor que no √©s ni True ni False per√≤ representa 'res'?", "opcions": ["False", "None", "Empty"], "resposta": "None"},
    {"pregunta": "Quin operador s‚Äôutilitza per comparar igualtat?", "opcions": ["=", "=>", "=="], "resposta": "=="},
    {"pregunta": "Com podem obtenir la longitud d‚Äôuna cadena?", "opcions": ["size('text')", "count('text')", "len('text')"], "resposta": "len('text')"},
    {"pregunta": "Quina √©s la sortida de print(type(True))?", "opcions": ["str", "bool", "int"], "resposta": "bool"},
    {"pregunta": "Quina √©s la sortida de print(9 // 2)?", "opcions": ["4", "4.5", "5"], "resposta": "4"},
    {"pregunta": "Quin operador representa la negaci√≥ l√≤gica?", "opcions": ["not equal", "!", "not"], "resposta": "not"},
    {"pregunta": "Com es defineix una tupla?", "opcions": ["[1, 2]", "(1, 2)", "{1, 2}"], "resposta": "(1, 2)"},
    {"pregunta": "Quin d‚Äôaquests √©s un tipus immutable?", "opcions": ["list", "tuple", "dict"], "resposta": "tuple"},
    {"pregunta": "Quin √©s el m√®tode correcte per afegir m√∫ltiples valors a una llista?", "opcions": ["add()", "extend()", "push()"], "resposta": "extend()"},
    {"pregunta": "Quina estructura serveix per capturar errors en Python?", "opcions": ["try-catch", "try-except", "error-check"], "resposta": "try-except"},
    {"pregunta": "Quin ser√† el resultat de set([1,2,2,3])?", "opcions": ["[1,2,2,3]", "{1,2,3}", "(1,2,2,3)"], "resposta": "{1,2,3}"},
    {"pregunta": "Com pots saber si una clau existeix dins un diccionari?", "opcions": ["key in dict", "key == dict", "'key' in dict"], "resposta": "'key' in dict"},
    {"pregunta": "Quin m√®tode s‚Äôutilitza per ordenar una llista?", "opcions": ["sort()", "organize()", "order()"], "resposta": "sort()"},
    {"pregunta": "Quin √©s el m√®tode per obtenir el valor d‚Äôuna clau d‚Äôun diccionari?", "opcions": ["value()", "get()", "access()"], "resposta": "get()"},
    {"pregunta": "Quin valor retorna una funci√≥ si no t√© return expl√≠cit?", "opcions": ["False", "None", "0"], "resposta": "None"},
    {"pregunta": "Com pots fer una funci√≥ an√≤nima?", "opcions": ["def =", "lambda", "static"], "resposta": "lambda"},
    {"pregunta": "Com pots saber els elements √∫nics d‚Äôuna llista?", "opcions": ["list()", "dict()", "set()"], "resposta": "set()"},
    {"pregunta": "Quin m√®tode retorna el n√∫mero d‚Äôaparicions d‚Äôun element a una llista?", "opcions": ["count()", "times()", "amount()"], "resposta": "count()"},
    {"pregunta": "Quin m√®tode de cadena elimina espais al principi i final?", "opcions": ["clean()", "strip()", "cut()"], "resposta": "strip()"},
    {"pregunta": "Qu√® retorna range(3)?", "opcions": ["[0,1,2,3]", "[0,1,2]", "[1,2,3]"], "resposta": "[0,1,2]"},
    {"pregunta": "Quin √©s el valor de not False?", "opcions": ["True", "False", "None"], "resposta": "True"},
    {"pregunta": "Quin √©s el m√®tode per inserir en una posici√≥ concreta d‚Äôuna llista?", "opcions": ["insert()", "place()", "put()"], "resposta": "insert()"},
    {"pregunta": "Quin tipus de dada √©s [x for x in range(3)]?", "opcions": ["dict", "list", "tuple"], "resposta": "list"},
    {"pregunta": "Quin s√≠mbol s‚Äôutilitza per concatenar cadenes?", "opcions": ["-", ",", "+"], "resposta": "+"},
    {"pregunta": "Com pots executar un codi nom√©s si √©s el fitxer principal?", "opcions": ["if __main__ == '__name__'", "if __name__ == '__main__'", "main(__name__)"], "resposta": "if __name__ == '__main__'"},
    {"pregunta": "Com es diu una funci√≥ dins una classe?", "opcions": ["m√®tode", "atribut", "inst√†ncia"], "resposta": "m√®tode"},
    {"pregunta": "Quin ser√† el resultat de bool('False')?", "opcions": ["True", "False", "Error"], "resposta": "True"}
]

class Player:
    def __init__(self, name, HP, LVL, ATTACK):
        self.name = name
        self.HP = HP
        self.LVL = LVL
        self.ATTACK = ATTACK

    def to_dict(self):
        return {
            "name": self.name,
            "HP": self.HP,
            "LVL": self.LVL,
            "ATTACK": self.ATTACK
        }

class Monster:
    def __init__(self, name, HP, LVL, ATTACK, art):
        self.name = name
        self.HP = HP
        self.LVL = LVL
        self.ATTACK = ATTACK
        self.art = art

    def to_dict(self):
        return {
            "name": self.name,
            "HP": self.HP,
            "LVL": self.LVL,
            "ATTACK": self.ATTACK
        }


score = 0
highscore = 0
difficulty_multiplier = 1

def status_bar():
    print("\nüßë‚Äçüíª Estat del jugador:")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print(f"‚ïë ‚ù§Ô∏è Vida: {player.HP:<16}‚ïë")
    print(f"‚ïë ‚öîÔ∏è  Atac: {player.ATTACK:<15}‚ïë")
    print(f"‚ïë üìà Nivell: {player.LVL:<14}‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

def print_title():
    print(r"""
 _________            .___
 \_   ___ \  ____   __| _/____   _____   ____   ____
 /    \  \/ /  _ \ / __ |/ __ \ /     \ /  _ \ /    \
 \     \___(  <_> ) /_/ \  ___/|  Y Y  (  <_> )   |  \
  \______  /\____/\____ |\___  >__|_|  /\____/|___|  /
         \/            \/    \/      \/            \/
 ________          _____              __      __  .__                            .__  .__ ._._.
 \______ \   _____/ ____\____ _____ _/  |_  _/  |_|  |__   ____   _____   _____  |  | |  || | |
  |    |  \_/ __ \   __\/ __ \\__  \\   __\ \   __\  |  \_/ __ \ /     \  \__  \ |  | |  || | |
  |    `   \  ___/|  | \  ___/ / __ \|  |    |  | |   Y  \  ___/|  Y Y  \  / __ \|  |_|  |_\|\|
 /_______  /\___  >__|  \___  >____  /__|    |__| |___|  /\___  >__|_|  / (____  /____/____/___
         \/     \/          \/     \/                  \/     \/      \/       \/          \/\/
               ‚öîÔ∏è  BENVINGUT A CODEMON ‚öîÔ∏è
""")

def Attack():
    global player, monster1
    question = random.choice(preguntes_python)

    clear_screen()
    print(f"{player_art}      {monster1.art}")
    status_bar()
    print(f"\nüî• {question['pregunta']}")
    for idx, option in enumerate(question["opcions"], 1):
        print(f"{idx}. {option}")

    try:
        user_input = int(input("\nEscriu el n√∫mero de la resposta correcta: "))
        if question["opcions"][user_input - 1] == question["resposta"]:
            print("\n‚úîÔ∏è Correcte! Player ataca!")
            monster1.HP -= player.ATTACK
            if monster1.HP < 0: monster1.HP = 0
            print(f"{monster1.name} HP restant: {monster1.HP}")
        else:
            raise ValueError
    except (ValueError, IndexError):
        print("\n‚ùå Incorrecte! Monster ataca!")
        player.HP -= monster1.ATTACK
        if player.HP < 0: player.HP = 0
        print(f"HP restant del jugador: {player.HP}")

    input("\nPrem ENTER per continuar...")

def M_die():
    global score
    clear_screen()
    print(f"\nüíÄ El monstre {monster1.name} ha mort!")
    score += 25
    print(f"Puntuaci√≥ actual: {score}")
    input("\nPrem ENTER per continuar...")

def P_Die():
    global highscore, score
    clear_screen()
    print("\n‚ò†Ô∏è Has mort!")
    dades2 = {"game_id": dades["game_id"], "data":dades, "score": score}
    post = requests.post("https://fun.codelearn.cat/hackathon/game/finalize")

    if score > highscore:
        highscore = score
        print("üéâ Nou r√®cord!")
    print(f"üèÜ La teva millor puntuaci√≥: {highscore}")
    score = 0
    input("\nPrem ENTER per continuar...")


def Battle():
    global monster1
    while player.HP > 0 and monster1.HP > 0:
        clear_screen()
        print(f"‚öîÔ∏è Batalla: {player.name} VS {monster1.name}\n")
        print(f"{player_art}      {monster1.art}")
        status_bar()
        print("\n‚ñ∂Ô∏è Torn del jugador")
        Attack()

        # Send progress
        dades1 = {"Jugador": player.to_dict(), "Monstre": monster1.to_dict(), "gameID": dades["game_id"]  }
        response = requests.post("https://fun.codelearn.cat/hackathon/game/store_progress", json=dades)
        response_json = response.json()

def create_monster():
    monsters = list(monster_ascii.items())
    name, art = random.choice(monsters)
    level = player.LVL
    base_hp = random.randint(80, 150)
    base_atk = random.randint(5, 15)
    hp = int(base_hp + level * 10 * difficulty_multiplier)
    attack = int(base_atk + level * 2 * difficulty_multiplier)
    return Monster(name, hp, level, attack, art)

def Game():
    global monster1, player
    while player.HP > 0:
        Battle()

        if player.HP <= 0:
            P_Die()
            break

        if monster1.HP <= 0:
            M_die()
            player.LVL += 1
            player.HP += 20 * difficulty_multiplier
            player.ATTACK += random.randint(5, 15) * difficulty_multiplier

            clear_screen()
            print(f"\n‚¨ÜÔ∏è Has pujat de nivell! Nivell {player.LVL}")
            print(f"Nova Vida: {player.HP}, Nou Atac: {player.ATTACK}")

            monster1 = create_monster()
            input("\nPrem ENTER per continuar...")

def main():
    global player, monster1, difficulty_multiplier

    random.seed(dades["seed"])

    while True:
        clear_screen()
        print_title()
        print("1. Jugar")
        print("2. Sortir")
        try:
            opcio = int(input("\nSelecciona una opci√≥: "))
        except ValueError:
            continue

        if opcio == 1:
            clear_screen()
            name = input("üë§ Introdueix el teu nom de jugador: ")
            print("\nüî¢ Selecciona la dificultat:")
            print("1. F√†cil")
            print("2. Mitj√†")
            print("3. Dif√≠cil")
            try:
                dificultat = int(input("\nOpci√≥: "))
                if dificultat == 1:
                    difficulty_multiplier = 0.8
                elif dificultat == 2:
                    difficulty_multiplier = 1.0
                elif dificultat == 3:
                    difficulty_multiplier = 1.5
                else:
                    raise ValueError
            except ValueError:
                print("\n‚ùó Opci√≥ no v√†lida. Tornant al men√∫ principal...")
                input("\nPrem ENTER per continuar...")
                continue

            # Inicialitza jugador i primer monstre
            player = Player(name, HP=100, LVL=1, ATTACK=10)
            monster1 = create_monster()

            Game()

        elif opcio == 2:
            print("\nüëã Adeu! Gr√†cies per jugar a Codemon!")
            break
        else:
            print("\n‚ùó Opci√≥ no v√†lida. Torna-ho a intentar.")
            input("\nPrem ENTER per continuar...")

main()